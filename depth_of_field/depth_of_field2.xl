// Do not blur more than a given amount
DOF_MAXBLUR -> 0.0
DOF_MAXBLUR := 1.5

// Width and height of textures
DOF_W -> 0.0
DOF_H -> 0.0

DOF_ZNEAR -> 0.0
DOF_ZNEAR := 1.0
DOF_ZFAR -> 0.0
DOF_ZFAR := z_far

// Execute Body and show the result as a texture of W x H pixels
// with a depth-of-field effect (depth blur).
dof_frame_texture W, H, Body ->
    frame_texture_with_depth W, H, DepthTex,
        do Body
    DepthTex -> 0
    DOF_W := W
    DOF_H := H
    texture_wrap true, true
    texture_unit 1
    texture DepthTex
    dof_shader


dof_shader ->
    dof_shader_program
    shader_set bgl_RenderedTexture := 0
    shader_set bgl_DepthTexture := 1
    shader_set bgl_RenderedTextureWidth := DOF_W
    shader_set bgl_RenderedTextureHeight := DOF_H
    shader_set znear := DOF_ZNEAR
    shader_set zfar := DOF_ZFAR
    shader_set focalDepth := DOF_FOCAL_DEPTH
    shader_set focalLength := DOF_FOCAL_LENGTH
    shader_set fstop := DOF_FSTOP
    shader_set showFocus := DOF_SHOWFOCUS
    shader_set autofocus := DOF_AUTOFOCUS
    shader_set maxblur := DOF_MAXBLUR

dof_shader_program ->
    shader_program
        fragment_shader <<
        /*
         * Depth-of-Field shader. Adapted from existing code (see notice below).
         */

        /*
        DoF with bokeh GLSL shader v2.4
        by Martins Upitis (martinsh) (devlog-martinsh.blogspot.com)

        ----------------------
        The shader is Blender Game Engine ready, but it should be quite simple to adapt for your engine.

        This work is licensed under a Creative Commons Attribution 3.0 Unported License.
        So you are free to share, modify and adapt it for your needs, and even use it for commercial use.
        I would also love to hear about a project you are using it.

        Have fun,
        Martins
        ----------------------
         */

        uniform sampler2D bgl_RenderedTexture;
        uniform sampler2D bgl_DepthTexture;
        uniform float bgl_RenderedTextureWidth;
        uniform float bgl_RenderedTextureHeight;

        #define PI  3.14159265

        float width = bgl_RenderedTextureWidth; //texture width
        float height = bgl_RenderedTextureHeight; //texture height

        vec2 texel = vec2(1.0/width,1.0/height);

        //uniform variables from external script

        uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below
        uniform float focalLength; //focal length in mm
        uniform float fstop; //f-stop value
        uniform int showFocus; //show debug focus point and focal range (red = focal point, green = focal range)
        uniform int autofocus; //use autofocus in shader? disable if you use external focalDepth value
        uniform float maxblur; //clamp value of max blur (0.0 = no blur,1.0 default)

        /*
        make sure that these two values are the same for your camera, otherwise distances will be wrong.
        */

        uniform float znear; //  = 0.1; //camera clipping start
        uniform float zfar; // = 100.0; //camera clipping end

        //------------------------------------------
        //user variables

        int samples = 3; //samples on the first ring
        int rings = 3; //ring count

        float CoC = 0.03;//circle of confusion size in mm (35mm film = 0.03mm)

        vec2 focus = vec2(0.5,0.5); // autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)

        // Highlight threshold and gain. (1.0, 1.0) = disabled
        float threshold = 1.0; // 0.5;
        float gain = 1.0; // 2.0;

        // Bokeh edge bias and chromatic aberration/fringing.
        // (0.0, 0.0) = disabled
        float bias = 0.0; // 0.5;
        float fringe = 0.0; // 0.7;

        bool noise = true; //use noise instead of pattern for sample dithering
        float namount = 0.0001; //dither amount

        /*
        next part is experimental
        not looking good with small sample and ring count
        looks okay starting from samples = 4, rings = 4
        */

        //------------------------------------------


        vec3 color(vec2 coords,float blur) //processing the sample
        {
                vec3 col = vec3(0.0);

                col.r = texture2D(bgl_RenderedTexture,coords + vec2(0.0,1.0)*texel*fringe*blur).r;
                col.g = texture2D(bgl_RenderedTexture,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;
                col.b = texture2D(bgl_RenderedTexture,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;

                vec3 lumcoeff = vec3(0.299,0.587,0.114);
                float lum = dot(col.rgb, lumcoeff);
                float thresh = max((lum-threshold)*gain, 0.0);
                return col+mix(vec3(0.0),col,thresh*blur);
        }

        vec2 rand(vec2 coord) //generating noise/pattern texture for dithering
        {
                float noiseX = ((fract(1.0-coord.s*(width/2.0))*0.25)+(fract(coord.t*(height/2.0))*0.75))*2.0-1.0;
                float noiseY = ((fract(1.0-coord.s*(width/2.0))*0.75)+(fract(coord.t*(height/2.0))*0.25))*2.0-1.0;

                if (noise)
                {
                        noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;
                        noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;
                }
                return vec2(noiseX,noiseY);
        }

        vec3 debugFocus(vec3 col, float blur, float depth)
        {
                float edge = 0.002*depth; //distance based edge smoothing
                float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);
                float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);

                col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);
                col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);

                return col;
        }

        float linearize(float depth)
        {
                return -zfar * znear / (depth * (zfar - znear) - zfar);
        }

        void main()
        {
                //scene depth calculation

                float depth = linearize(texture2D(bgl_DepthTexture,gl_TexCoord[0].xy).x);

                //focal plane calculation

                float fDepth = focalDepth;

                if (autofocus != 0)
                {
                        fDepth = linearize(texture2D(bgl_DepthTexture,focus).x);
                }

                //dof blur factor calculation

                float blur = 0.0;

                float f = focalLength; //focal length in mm
                float d = fDepth*1000.0; //focal plane in mm
                float o = depth*1000.0; //depth in mm

                float a = (o*f)/(o-f);
                float b = (d*f)/(d-f);
                float c = (d-f)/(d*fstop*CoC);

                blur = abs(a-b)*c;

                blur = clamp(blur,0.0,1.0);

                // calculation of pattern for ditering

                vec2 noise = rand(gl_TexCoord[0].xy)*namount*blur;

                // getting blur x and y step factor

                float w = (1.0/width)*blur*maxblur+noise.x;
                float h = (1.0/height)*blur*maxblur+noise.y;

                // calculation of final color

                vec3 col = vec3(0.0);

                if(blur < 0.05) //some optimization thingy
                {
                        col = texture2D(bgl_RenderedTexture, gl_TexCoord[0].xy).rgb;
                }

                else
                {
                        col = texture2D(bgl_RenderedTexture, gl_TexCoord[0].xy).rgb;
                        float s = 1.0;
                        int ringsamples;

                        for (int i = 1; i <= rings; i += 1)
                        {
                                ringsamples = i * samples;

                                for (int j = 0 ; j < ringsamples ; j += 1)
                                {
                                        float step = PI*2.0 / float(ringsamples);
                                        float pw = (cos(float(j)*step)*float(i));
                                        float ph = (sin(float(j)*step)*float(i));
                                        float p = 1.0;
                                        col += color(gl_TexCoord[0].xy + vec2(pw*w,ph*h),blur)*mix(1.0,(float(i))/(float(rings)),bias)*p;
                                        s += 1.0*mix(1.0,(float(i))/(float(rings)),bias)*p;
                                }
                        }
                        col /= s; //divide by sample count
                }

                if (showFocus != 0)
                {
                        col = debugFocus(col, blur, depth);
                }

                gl_FragColor.rgb = col;
                gl_FragColor.a = 1.0;
        }
        >>

