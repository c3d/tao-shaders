// ****************************************************************************
//  glow2.xl                                                        Tao project
// ****************************************************************************
//
//   File Description:
//
//    Implement glow effect
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

license_check -> check_impress_or_license "Glow 1.003"

// ----------------------------------------------------------------------------
//   RADIAL GLOW
// ----------------------------------------------------------------------------

// Ratio of the glow
GLOW_RATIO -> 1.0
GLOW_RATIO := 1.0

// Ratio of the shadow
SHADOW_RATIO -> 0.5
SHADOW_RATIO := 0.5

// Length of the glow
GLOW_LENGTH -> 1.0
GLOW_LENGTH := 1.0

// Height of the glow
GLOW_HEIGHT -> 500.0
GLOW_HEIGHT := 500.0

// Width of the glow
GLOW_WIDTH -> 500.0
GLOW_WIDTH := 500.0

// Number of samples
GLOW_SAMPLES -> 7
GLOW_SAMPLES := 7

radial_glow n:integer, l:real, g:real, s:real, w:real, h:real ->
    /**
    * Apply a radial glow effect on the current texture.
    **/
    GLOW_SAMPLES := n
    license_check
    GLOW_LENGTH  := l
    GLOW_RATIO   := g
    SHADOW_RATIO := s
    GLOW_WIDTH   := w
    GLOW_HEIGHT  := h
    radial_glow_shader

radial_glow_shader ->
    /**
    * Define a radial glow shader.
    **/
    shader_program
        vertex_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            void main()
            {
                gl_Position = ftransform();
                gl_TexCoord[0].xy = (gl_TextureMatrix[0] * gl_MultiTexCoord0).xy;
            }
        >>
        fragment_shader <<
            /********************************************************************************
            **
            ** Copyright (C) 2011 Taodyne.
            ** All rights reserved.
            ** Contact: Taodyne (contact@taodyne.com)
            **
            ** This file is part of the Tao Presentations application, developped by Taodyne.
            ** It can be only used in the software and these modules.
            **
            ** If you have questions regarding the use of this file, please contact
            ** Taodyne at contact@taodyne.com.
            **
            ********************************************************************************/
            uniform int       number;
            uniform float     glowLength;
            uniform float     glow, shadow;
            uniform float     width, height;
            uniform sampler2D tex;

            /**
            *  Compute samples on a circle
            *  around the current pixel
            **/
            vec2 computeRadialSamples(int n)
            {
                float step = 360.0 / float(number);
                return vec2(sin(step * float(n)), cos(step * float(n)));
            }

            void main()
            {
                // Size of one texel
                vec2 mult = vec2(1.0/width, 1.0/height);

                vec4 color = texture2D(tex,gl_TexCoord[0].xy);

                vec4 sum = vec4(0.0);

                // take blur samples in the a radial direction
                // from the current pixel
                for (int i = 0; i < number ; i++)
                {
                    sum += texture2D( tex, gl_TexCoord[0].xy + mult * glowLength * computeRadialSamples(i));
                }

                // Divided by the number of samples
                sum *= 1.0/float(number);

                //Blend the original color with the averaged pixels
                vec4 mainColor = glow * color + shadow * sum;
                gl_FragColor = mainColor;
            }
        >>
    shader_set tex        := texture_unit // Current texture
    shader_set number     := GLOW_SAMPLES // Number of samples
    shader_set glowLength := GLOW_LENGTH  // Length of the glow
    shader_set glow       := GLOW_RATIO   // Ratio of the glow
    shader_set shadow     := SHADOW_RATIO // Ratio of the shadow
    shader_set width      := GLOW_WIDTH   // Width of the glow
    shader_set height     := GLOW_HEIGHT  // Height of the glow
