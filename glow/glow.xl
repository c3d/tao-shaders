module_description
    id "ee8489fe-b2c5-4eda-990b-50250452b9a2"
    name "Glow effect"
    description "GLSL fragment shader to generate a glow effect on a texture. " &
                "Shader code written by Taodyne."
    import_name "Glow"
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.0

module_description "fr",
    name "Effet Eclair"
    description "Fragment shader GLSL qui génére un effet de glow sur une texture. " &
                "Code shader écrit par Taodyne."

// -------------------------------------------------------------------------------------------------------------------
//   RADIAL GLOW
// -------------------------------------------------------------------------------------------------------------------

GLOW_RATIO -> 1.0
GLOW_RATIO := 1.0

SHADOW_RATIO -> 0.5
SHADOW_RATIO := 0.5

GLOW_LENGTH -> 1.0
GLOW_LENGTH := 1.0

GLOW_HEIGHT -> 500.0
GLOW_HEIGHT := 500.0

GLOW_WIDTH -> 500.0
GLOW_WIDTH := 500.0

GLOW_SAMPLES -> 7
GLOW_SAMPLES := 7

radial_glow n:real, l:real, g:real, s:real, w:real, h:real ->
    /**
    * Apply a radial glow effect on the current texture.
    **/
    GLOW_SAMPLES := n
    GLOW_LENGTH  := l
    GLOW_RATIO   := g
    SHADOW_RATIO := s
    GLOW_WIDTH   := w
    GLOW_HEIGHT  := h
    radial_glow_shader

radial_glow_shader ->
    /**
    * Define a radial glow shader.
    **/
    shader_program
        vertex_shader <<
            void main()
            {
                gl_Position = ftransform();
                gl_TexCoord[0].xy = gl_TextureMatrix[0] * gl_MultiTexCoord0;
            }
        >>
        fragment_shader <<
            uniform int       number;
            uniform float     glowLength;
            uniform float     glow, shadow;
            uniform float     width, height;
            uniform sampler2D tex;

            /**
            *  Compute samples on a circle
            *  around the current pixel
            **/
            vec2 computeRadialSamples(int n)
            {
                float step = 360.0 / (float) number;
                return vec2(sin(step * n), cos(step * n));
            }

            void main()
            {
                // Size of one texel
                vec2 mult = vec2(1.0/width, 1.0/height);

                vec4 color = texture2D(tex,gl_TexCoord[0].xy);

                vec4 sum;

                // take blur samples in the a radial direction
                // from the current pixel
                for (int i = 0; i < number ; i++)
                {
                    sum += texture2D( tex, gl_TexCoord[0].xy + mult * glowLength * computeRadialSamples(i));
                }

                // Divided by the number of samples
                sum *= 1.0/((float) number);

                //Blend the original color with the averaged pixels
                vec4 mainColor = glow * color + shadow * sum;
                gl_FragColor = mainColor;
            }
        >>
    shader_set tex        := texture_unit // Current texture
    shader_set number     := GLOW_SAMPLES // Number of samples
    shader_set glowLength := GLOW_LENGTH  // Length of the glow
    shader_set glow       := GLOW_RATIO   // Ratio of the glow
    shader_set shadow     := SHADOW_RATIO // Ratio of the shadow
    shader_set width      := GLOW_WIDTH   // Width of the glow
    shader_set height     := GLOW_HEIGHT  // Height of the glow

// -------------------------------------------------------------------------------------------------------------------
//   LINEAR GLOW
// -------------------------------------------------------------------------------------------------------------------
