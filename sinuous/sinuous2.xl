// ****************************************************************************
//  sinuous2.xl                                                     Tao project
// ****************************************************************************
//
//   File Description:
//
//    Implement sinuous effect.
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2011 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

sinuous_license_ok ->
    if check_license ("Sinuous 1.0", false) then
        true
    else
        if blink (1.0, 1.0) then
           true
        else
           false

sinuous_shape X:real, Y:real, W:real, H:real ->
    /**
    * Draw four interconnected sinuous shape at the given coordinates.
    * @a X and @a Y indicate the center of the shape.
    * @a W and @a H are its dimensions.
    **/
    if sinuous_license_ok then
        locally
            sinuous_shader

            shader_set pos_low := (25, 0, -3)
            shader_set sin_low := (0, 11 + 3.5 * sin time, 0)
            shader_set mul_low := (0, 0, 1)

            shader_set pos_high := (25, 1, -5)
            shader_set sin_high := (0, 11 + 3 * sin time, 0)
            shader_set mul_high := (0, 0, 1)

            shader_set move := (0.0, 0.2)
            shader_set color := (1.0, 0.7, 0.0, 0.9)
            rectangle X, Y, W, H

            shader_set move := (0.0, 0.4)
            shader_set color := (0.2, 0.0, 0.6, 0.9)
            rectangle X, Y, W, H

            shader_set pos_low := (23, -1, -2)
            shader_set pos_high := (23, 3, -8)
            shader_set sin_low := (0, 22, 2 + sin (0.3 * time))
            shader_set sin_high := (0, 25, 3 + sin (0.32 * time))
            shader_set move := (-0.5, 0.6)
            shader_set color := (0.8, 0.0, 0.1, 0.9)
            rectangle X, Y, W, H

            shader_set pos_low := (25 * sin (0.11 * time), 25 * cos (0.11 * time), -3)
            shader_set pos_high := (25 * sin (0.22 * time), 25 * cos (0.22 * time), -4)
            shader_set move := (0.1, 0.8)
            shader_set color := (0.8 + 0.2 * sin (0.17 * time), 0.2, 0.1, 0.4)
            rectangle X, Y, W, H

sinuous_shader ->
    /**
    * Install the sinuous shader in the current drawing context.
    **/
    // Set an empty texture to define texture coordinates (the shader uses them)
    texture ""
    shader_program
        vertex_shader <<
        void main()
        {
            gl_Position = ftransform();
            gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
        }
        >>
        fragment_shader <<
        uniform vec2 move;
        uniform vec4 color;
        uniform vec3 sin_low;
        uniform vec3 pos_low;
        uniform vec3 mul_low;
        uniform vec3 sin_high;
        uniform vec3 pos_high;
        uniform vec3 mul_high;

        void main()
        {
            vec2 p = gl_TexCoord[0].st + move;

            float lp = dot(p, pos_low.xy) + pos_low.z;
            float ls = dot(p, sin_low.xy) + sin_low.z;
            float lm = dot(p, mul_low.xy) + mul_low.z;
            float ldelta = lp - lm * sin(ls);
            float lamp = clamp(ldelta, 0.0, 1.0);

            float hp = dot(p, pos_high.xy) + pos_high.z;
            float hs = dot(p, sin_high.xy) + sin_high.z;
            float hm = dot(p, mul_high.xy) + mul_high.z;
            float hdelta = hp - hm * sin(hs);
            float hamp = clamp(hdelta, 0.0, 1.0);

            gl_FragColor = lamp * (1.0-hamp) * color;
        }
        >>
