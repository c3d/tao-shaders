// *****************************************************************************
// monjori.xl                                                      Tao3D project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2011-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2011-2013, Catherine Burvelle <catherine@taodyne.com>
// (C) 2011-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2011-2013, Jérôme Forissier <jerome@taodyne.com>
// (C) 2011-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
module_description
    id "CAFD6495-C752-4FEC-9157-66357A451B8E"
    name "Monjori effect"
    description "GLSL fragment shader to generate a changing picture. " &
                "Shader code written by Mic http://badc0de.jiggawatt.org " &
                "for the demoscene intro Monjori. " &
                "Adapted from " &
                "http://www.iquilezles.org/apps/shadertoy/?p=monjori."
    import_name "Monjori"
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.014

module_description "fr",
    name "Effet Monjori"
    description "Fragment shader GLSL pour générer une image changeante. " &
                "Code shader écrit par Mic http://badc0de.jiggawatt.org " &
                "pour la démo Monjori. " &
                "Adapté depuis " &
                "http://www.iquilezles.org/apps/shadertoy/?p=monjori."

// Example use:
//
// monjori page_time * 0.1


// Time
tm -> 0.0

monjori t:real ->
    tm := t
    // Set an empty texture to define texture coordinates (the shader uses them)
    texture ""
    monjori_shader

monjori_shader ->
    shader_program
        vertex_shader <<
            void main()
            {
                gl_Position = ftransform();
                gl_TexCoord[0] = gl_TextureMatrix[0]*gl_MultiTexCoord0;
            }
        >>
        fragment_shader <<
            uniform float time;

            void main(void)
            {
                vec2 p = -1.0 + 2.0 *  gl_TexCoord[0].st;
                float a = time*40.0;
                float d,e,f,g=1.0/40.0,h,i,r,q;
                e=400.0*(p.x*0.5+0.5);
                f=400.0*(p.y*0.5+0.5);
                i=200.0+sin(e*g+a/150.0)*20.0;
                d=200.0+cos(f*g/2.0)*18.0+cos(e*g)*7.0;
                r=sqrt(pow(i-e,2.0)+pow(d-f,2.0));
                q=f/r;
                e=(r*cos(q))-a/2.0;f=(r*sin(q))-a/2.0;
                d=sin(e*g)*176.0+sin(e*g)*164.0+r;
                h=((f+d)+a/2.0)*g;
                i=cos(h+r*p.x/1.3)*(e+e+a)+cos(q*g*6.0)*(r+h/3.0);
                h=sin(f*g)*144.0-sin(e*g)*212.0*p.x;
                h=(h+(f-e)*q+sin(r-(a+h)/7.0)*10.0+i/4.0)*g;
                i+=cos(h*2.3*sin(a/350.0-q))*184.0*sin(q-(r*4.3+a/12.0)*g)+tan(r*g+h)*184.0*cos(r*g+h);
                i=mod(i/5.6,256.0)/64.0;
                if(i<0.0) i+=4.0;
                if(i>=2.0) i=4.0-i;
                d=r/350.0;
                d+=sin(d*d*8.0)*0.52;
                f=(sin(a*g)+1.0)/2.0;
                gl_FragColor=vec4(vec3(f*i/1.6,i/2.0+d/13.0,i)*d*p.x+vec3(i/1.3+d/8.0,i/2.0+d/18.0,i)*d*(1.0-p.x),1.0);
            }
        >>
    shader_set time := tm
